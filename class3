

--오늘의 날짜를 알고 싶을 때는 특정 테이블을 참조할 필요가 없습니다. 이때 사용하는 것이 DUAL 테이블.

--SQL은 다양한 숫자 타입 함수를 제공하는데 그중 가장 많이 쓰이는 ROUND와 TRUNC 함수
--salary를 30일로 나누고 나눈 값의 소수점 첫째 자리, 소수점 둘째 자리, 정수 첫째 자리에서 절삭하여 출력
SELECT salary,

       salary/30 일급,

       TRUNC(salary/30, 0) 적용결과0,

       TRUNC(salary/30, 1) 적용결과1,

       TRUNC(salary/30, -1) 적용결과MINUS1

FROM   employees;






--오늘 날짜, hire_date, 오늘 날짜와 hire_date 사이의 개월 수를 출력
SELECT SYSDATE, hire_date, MONTHS_BETWEEN(SYSDATE, hire_date) 적용결과

FROM   employees

WHERE  department_id = 100;






--ADD_MONTHS는 날짜에 월을 빼거나 더하는 함수
--employee_id가 100과 106 사이인 직원의 hire_date에 3개월을 더한 값, hire_date에 3개월을 뺀 값을 출력
SELECT hire_date,

       ADD_MONTHS(hire_date, 3) 더하기_적용결과,

       ADD_MONTHS(hire_date, -3) 빼기_적용결과

FROM   employees

WHERE  employee_id BETWEEN 100 AND 106;






--NEXT_DAY는 지정된 요일의 돌아오는 날짜가 언제인지 계산하는 함수
-- employee_id가 100과 106 사이인 직원의 hire_date에서 가장 가까운 금요일의 날짜가 언제인지 문자로 지정해서 출력하고, 숫자로도 지정해서 출력
SELECT hire_date,

       NEXT_DAY(hire_date,'금요일') 적용결과_문자지정,

       NEXT_DAY(hire_date, 6) 적용결과_숫자지정

FROM   employees

WHERE  employee_id BETWEEN 100 AND 106;






--employee_id가 100과 106 사이인 직원의 hire_date를 기준으로 해당 월의 마지막 날짜를 출력
SELECT hire_date,

       LAST_DAY(hire_date) 적용결과

FROM   employees

WHERE  employee_id BETWEEN 100 AND 106;








--ROUND는 지정된 값을 기준으로 반올림하는 함수고 TRUNC는 지정 값을 기준으로 월 또는 연도로 절삭하는 함수

--employee_id가 100과 106 사이인 직원의 hire_date에 대해 월 기준 반올림, 연 기준 반올림, 월 기준 절삭, 연 기준 절삭을 적용하여 출력
SELECT hire_date,

       ROUND(hire_date,‘MONTH’) 적용결과_ROUND_M,

       ROUND(hire_date,‘YEAR’) 적용결과_ROUND_Y,

       TRUNC(hire_date,‘MONTH’) 적용결과_TRUNC_M,

       TRUNC(hire_date,‘YEAR’) 적용결과_TRUNC_Y

FROM   employees

WHERE  employee_id BETWEEN 100 AND 106;

 








--TO_CHAR는 날짜, 숫자, 문자 값을 지정한 형식의 VARCHAR2 타입 문자열로 변환하는 함수.




--시간을 날짜시간형식으로 변경
SELECT TO_CHAR(SYSDATE, 'HH:MI:SS PM') 시간형식,

       TO_CHAR(SYSDATE, 'YYYY/MM/DD HH:MI:SS PM') 날짜와시간조합

FROM   dual;






--기타형식으로 표현
SELECT TO_CHAR(SYSDATE, 'HH-MI-SS PM') 시간형식,

       TO_CHAR(SYSDATE, ' "날짜:" YYYY/MM/DD "시각:" HH:MI:SS PM' ) 날짜와시각표현

FROM   dual;









--문자열을 숫자타입으로
SELECT TO_NUMBER('123')
FROM   dual;


--날짜형태로 변환
SELECT TO_DATE(‘20171007’, ‘YYMMDD’)
FROM   dual;











--테이블을 정의할 때 null 값을 가지지 못하도록 지정할 수도 있습니다. 이런 경우를 not null이라함


SELECT salary * commission_pct ----salary와 commission_pct를 곱한 결과 출력
FROM   employees
ORDER BY commission_pct;







--employees 테이블에서 salary에 commission_pct를 곱하되 commission_pct가 null일 때는 1로 치환하여 commission_pct를 곱한 결과를 출력

SELECT salary * NVL(commission_pct, 1)
FROM   employees
ORDER BY commission_pct;








--DECODE 함수는 특정 조건을 만족하는 경우에 값을 변경하여 출력하고자 할 때 유용.
 IF-THEN-ELSE-END의 조건 논리를 가능하게 하는 함수. 데이터 값이 조건 값과 일치하면 치환 값을 출력하고 일치하지 않으면 기본값을 출력

SELECT first_name,

       last_name,

       department_id,

       salary 원래급여,

       DECODE(department_id, 60, salary*1.1, salary) 조정된급여,

       DECODE(department_id, 60, ‘10%인상’, ‘미인상’) 인상여부

FROM   employees;











--salary가 9000 이상이면 ‘상위급여’, 6000과 8999 사이면 ‘중위급여’, 그 외는 ‘하위급여’라고 출력
SELECT employee_id, first_name, last_name, salary,

       CASE  --CASE 함수는 조건의 범위가 다양한 경우에 쉽게 처리할 수 있음

            WHEN salary >= 9000 THEN ‘상위급여’

            WHEN salary BETWEEN 6000 AND 8999 THEN ‘중위급여’

            ELSE ‘하위급여’

       END AS 급여등급

FROM  employees

WHERE job_id = ‘IT_PROG’;






--공통 순위를 출력하되 공통 순위만큼 건너뛰어 다음 순위를 출력한다.RANK
--공통 순위를 출력하되 건너뛰지 않고 바로 다음 순위를 출력한다.   DENSE_RANK
--공통 순위를 없이 출력한다.ROW_NUMBER







--employees 테이블의 salary 값이 높은 순서대로 순위를 매겨 출력
SELECT employee_id,

       salary,

       RANK() OVER(ORDER BY salary DESC) RANK_급여,

       DENSE_RANK() OVER(ORDER BY salary DESC) DENSE_RANK_급여,

       ROW_NUMBER() OVER(ORDER BY salary DESC) ROW_NUMBER_급여

FROM employees;





--employees 테이블 직원이 속한 department_id 안에서 salary 값이 높은 순서대로 순위를 매겨 출력
SELECT A.employee_id,

       A.department_id,

       B.department_name,

       salary,

       RANK()       OVER(PARTITION BY A.department_id ORDER BY salary DESC) RANK_급여,

       DENSE_RANK() OVER(PARTITION BY A.department_id ORDER BY salary DESC) DENSE_RANK_급여,

       ROW_NUMBER() OVER(PARTITION BY A.department_id ORDER BY salary DESC) ROW_NUMBER_급여

FROM employees A, departments B

WHERE A.department_id = B.department_id

ORDER BY B.department_id, A.salary DESC;








--지정된 열의 행의 갯수세는 것
SELECT COUNT(salary) salary행수
FROM   employees;




--합과 평균
SELECT SUM(salary) 합계, AVG(salary) 평균, SUM(salary)/COUNT(salary) 계산된평균
FROM   employees;








--최댓값, 최솟값
SELECT MAX(salary) 최댓값, MIN(salary) 최솟값, MAX(first_name) 최대문자값, MIN(first_name) 최소문자값
FROM   employees;








Select job_id 직무,SUM(salary) 직무별_총급여, AVG(salary) 직무별_평균급여
FROM   employees  
WHERE  employee_id >=10
GROUP  BY job_id
ORDER  BY 직무별_총급여 DESC,직무별_평균급여;






SELECT job_id job_id_대그룹,
       manager_id manager_id_중그룹,
       SUM(salary) 그룹핑_총급여,
       AVG(salary) 그룹핑_평균급여
FROM   employees
WHERE  employee_id >= 10
GROUP BY job_id, manager_id ----job_id별로 한 번 그룹화하고 manager_id별로 다시 한 번 그룹화
ORDER BY 그룹핑_총급여 DESC, 그룹핑_평균급여;





SELECT job_id 직무, SUM(salary) 직무별_총급여, AVG(salary) 직무별_평균급여
FROM   employees
WHERE  employee_id >= 10   --HAVING 절은 그룹화된 값에 조건식을 적용할 때 사용합니다. 즉, WHERE 절에서는 그룹 함수를 사용할 수 없으므로 HAVING 절을 사용해 그룹 함수의 결괏값에 대해 조건식을 적용
GROUP BY job_id
HAVING   SUM(salary) > 30000  --HAVING의 위치는 그룹BY밑이 좋음
ORDER BY 직무별_총급여 DESC, 직무별_평균급여;







